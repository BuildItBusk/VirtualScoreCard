@page "/newround"

@using GolfScoreUI.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStorage

<h3>Start a new round</h3>

<EditForm Model="@roundSettings" OnValidSubmit="@HandleValidSubmit">
<div class="form-group">
    <label for="maxStrokes">Maximum number of strokes per hole</label>
    <InputNumber class="form-control form-control-lg" id="maxStrokes" @bind-Value="roundSettings.MaxStrokesPerHole" />

    <label for="numberOfHoles">Number of holes</label>
    <InputNumber class="form-control form-control-lg" id="numberOfHoles" @bind-Value="roundSettings.NumberOfHoles" />

    <div class="form-group">
        <fieldset id="Players">
            <legend>Players</legend>
                @foreach (var element in roundSettings.Players.Select((p, i) => new { Player = p, Index = i }))
                {
                    <InputText id="@($"player-{element.Index+1}")" placeholder="@($"Player {element.Index+1}")" class="form-control mb-2" @bind-Value="@element.Player.Name" />
                }
        </fieldset>
    </div>
    <button type="submit" class="btn btn-primary">Start round</button>
</div>
</EditForm>

@code {
    private RoundSettings roundSettings = new();

    private async Task HandleValidSubmit()
    {
        var players = roundSettings.Players.Where(p => !string.IsNullOrEmpty(p.Name)).ToList();

        Scorecard scorecard = new()
        {
            NumberOfHoles = roundSettings.NumberOfHoles,
            MaxStrokes = roundSettings.MaxStrokesPerHole,
            Players = players
        };

        foreach (var player in scorecard.Players)
        {
            for (int i = 1; i <= scorecard.NumberOfHoles; i++)
                scorecard.Scores.Add(new HoleScore { HoleNumber = i, PlayerId = player.Id });
        } 

        await ProtectedLocalStorage.SetAsync("scorecard", scorecard);
    }

}
