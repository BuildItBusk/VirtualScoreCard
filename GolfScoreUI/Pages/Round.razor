@page "/"

@using GolfScoreUI.Repositories
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using GolfScoreUI.Data

@inject ProtectedLocalStorage ProtectedLocalStorage

<h3>Scoreboard</h3>

<div class="table-responsive" onload="selectInputOnLoad">
    @if (scorecard != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="row">#</th>
                    @foreach (var player in scorecard.Players)
                    {
                        <th scope="col">@player.Name</th>
                    }          
                </tr>
            </thead>
            <tbody>
                @for (int i = 1; i <= scorecard.NumberOfHoles; i++)
                {
                    int playerIdx = 1; // Used to generate the id of the score fields
                    int hole = i;
                    <tr>
                        <th scope="row">@(hole)</th>
                        
                        @foreach(var holeScore in scorecard.Scores.Where(s => s.HoleNumber == hole))
                        {
                            <td class="col-xs-1"><input id="player-@(playerIdx)-hole-@(i)" type="text" pattern="\d*" class="form-control highlight-on-focus" onClick="this.select();" @bind-value="holeScore.NumberOfStrokes" @bind-value:event="oninput" /></td>
                            playerIdx++;
                        }            
                    </tr>
                }
                <tr>
                    <th>Sum</th>
                    @foreach (var player in scorecard.Players)
                    {
                        <td>@scorecard.ScoreSum(player.Id)</td>
                    }
            </tr>
          </tbody>
        </table>
    }
    else
    {
        <p>No scorecard available, please start a new round.</p>
    }
</div>
 
@code {
    private Scorecard? scorecard;    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IScorecardRepository repository = new ScorecardLocalStorageRepository(ProtectedLocalStorage);

        if (firstRender)
        {
            try
            {
                scorecard = await repository.GetLatest();
            }
            catch (InvalidOperationException ex)
            {
                scorecard = null;
            }
            finally
            {
                StateHasChanged();
            }
        }
        else
        {
            if (scorecard == null)
                return;
            
            await repository.Update(scorecard);
        }
    }
}